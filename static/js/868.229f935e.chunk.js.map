{"version":3,"file":"static/js/868.229f935e.chunk.js","mappings":"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","sources":["components/States/Colorado.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n// import { useActionData } from 'react-router-dom';\n\nfunction ColoradoContent({ className, setActiveState }) {\n    const coloradoRef = useRef();\n    const rockyMountainsRef = useRef();\n    const mesaVerdeRef = useRef();\n    const gardenOfTheGodsRef = useRef();\n    const redRocksRef = useRef();\n\n    // TODO: 1. Add more refs for other parks if any\n\n\n    useEffect(() => {\n        const observer = new IntersectionObserver(\n            ([entry]) => {\n                if (entry.isIntersecting) {\n                    window.history.replaceState(null, null, \"#colorado\");\n                    setActiveState(\"colorado\")\n                }\n            },\n            { threshold: 0.02 }\n        );\n        \n        const rockyMountainsObserver = new IntersectionObserver(\n            ([entry]) => {\n                if (entry.isIntersecting) {\n                    window.history.replaceState(null, null, \"#rockyMountains\");\n                    setActiveState(\"rockyMountains\")\n                }\n            },\n            { threshold: 0.02 }\n        );\n\n        const mesaVerdeObserver = new IntersectionObserver(\n            ([entry]) => {\n                if (entry.isIntersecting) {\n                    window.history.replaceState(null, null, \"#mesaVerde\");\n                    setActiveState(\"mesaVerde\")\n                }\n            },\n            { threshold: 0.02 }\n        );\n\n        const gardenOfTheGodsObserver = new IntersectionObserver(\n            ([entry]) => {\n                if (entry.isIntersecting) {\n                    window.history.replaceState(null, null, \"#gardenOfTheGods\");\n                    setActiveState(\"gardenOfTheGods\")\n                }\n            },\n            { threshold: 0.02 }\n        );\n\n        const redRocksObserver = new IntersectionObserver (\n            ([entry]) => {\n                if (entry.isIntersecting) {\n                    window.history.replaceState(null, null, '#redRocks');\n                    setActiveState(\"redRocks\")\n                }\n            },\n            { threshold: 0.02 }\n        );\n        \n\n        // TODO: 2. Add observers for other parks if any\n\n\n        const currentColoradoRef = coloradoRef.current;\n        const currentRockyMountainsRef = rockyMountainsRef.current;\n        const currentMesaVerdeRef = mesaVerdeRef.current;\n        const currentGardenOfTheGodsRef = gardenOfTheGodsRef.current;\n        const currentRedRocksRef = redRocksRef.current;\n\n        // TODO: 3. Add const variable above\n\n\n        if (currentColoradoRef) {\n            observer.observe(currentColoradoRef);\n        }\n        if (currentColoradoRef) {\n            rockyMountainsObserver.observe(currentRockyMountainsRef);\n        }\n        if (currentMesaVerdeRef) {\n            mesaVerdeObserver.observe(currentMesaVerdeRef)\n        }\n        if (currentGardenOfTheGodsRef) {\n            gardenOfTheGodsObserver.observe(currentGardenOfTheGodsRef);\n        }\n        if (currentRedRocksRef) {\n            redRocksObserver.observe(currentRedRocksRef);\n        }\n\n        // TODO: 4. Add if statement to observe ref for new parks if any\n\n\n        return () => {\n            if (currentColoradoRef) {\n                observer.unobserve(currentColoradoRef);\n            }\n            if (currentColoradoRef) {\n                rockyMountainsObserver.unobserve(currentRockyMountainsRef);\n            }\n            if (currentMesaVerdeRef) {\n                observer.unobserve(currentMesaVerdeRef);\n            }\n            if (currentGardenOfTheGodsRef) {\n                observer.unobserve(currentGardenOfTheGodsRef);\n            }\n            if (currentRedRocksRef) {\n                observer.unobserve(currentRedRocksRef);\n            }\n\n            // TODO: 5. Add if statement to unobserve refs for new parks if any\n\n        };\n    }, [setActiveState]);\n\n    return (\n        <section className={`${className}`} id=\"colorado\" ref={coloradoRef}>\n            <div className='state-section bg-light p-3 m-3'>\n                <h3 className='intro-subtitle'>COLORADO</h3>\n                <p className='intro-paragraph'>(Paragraph about the state: Recognize native lands, give my favorite history, talk about how it makes me feel. Talk about cities/towns, and places I've been to, or notable places. Try to keep it short.) ____________ Kombucha JOMO pinterest gorpcore ramps ennui, wolf cardigan pitchfork raw denim bodega boys distillery. Meh glossier shabby chic poke semiotics, sriracha single-origin coffee stumptown. Forage DIY brunch etsy. Lomo venmo squid swag lo-fi vaporware paleo chia everyday carry letterpress. Hell of polaroid meh kale chips jawn, leggings blog shabby chic skateboard offal poutine church-key.</p>\n            </div>\n            <div className='park-section bg-light p-3 m-3' ref={rockyMountainsRef} >\n                <h4 className='intro-subtitle park-title'>Rocky Mountains National Park</h4>\n                <p className='intro-paragraph'>Some content I want to share about the park.</p>\n                {/* Grid and photos go here */}\n\n            </div>\n            <div className='park-section bg-light p-3 m-3' ref={mesaVerdeRef}>\n                <h4 className='intro-subtitle park-title'>Mesa Verde National Park</h4>\n                <p className='intro-paragraph'>Some content I want to share about the park and about my hiking experience.</p>\n                {/* Grid and photos go here */}\n            </div>\n            <div className='park-section bg-light p-3 m-3' ref={gardenOfTheGodsRef}>\n                <h4 className='intro-subtitle park-title'>Garden of the Gods</h4>\n                <p className='intro-paragraph'>Some content I want to share about the park and about my hiking experience.</p>\n                {/* Grid and photos go here */}\n            </div>\n            <div className='park-section last-park bg-light p-3 m-3' ref={redRocksRef}>\n                <h4 className='intro-subtitle park-title'>Red Rocks Ampitheatre and Park</h4>\n                <p className='intro-paragraph'>Some content I want to share about the park and about my hiking experience.</p>\n                {/* Grid and photos go here */}\n            </div>\n        </section>\n    );\n}\n\nexport default ColoradoContent;\n"],"names":["_ref","className","setActiveState","coloradoRef","useRef","rockyMountainsRef","mesaVerdeRef","gardenOfTheGodsRef","redRocksRef","useEffect","observer","IntersectionObserver","_ref2","_slicedToArray","isIntersecting","window","history","replaceState","threshold","rockyMountainsObserver","_ref4","mesaVerdeObserver","_ref6","gardenOfTheGodsObserver","_ref8","redRocksObserver","_ref10","currentColoradoRef","current","currentRockyMountainsRef","currentMesaVerdeRef","currentGardenOfTheGodsRef","currentRedRocksRef","observe","unobserve","_jsxs","concat","id","ref","children","_jsx"],"sourceRoot":""}