{"version":3,"file":"static/js/990.8282d0c4.chunk.js","mappings":"uLAiEA,UA5DA,SAAaA,GAAiC,IAA9BC,EAASD,EAATC,UAAWC,EAAcF,EAAdE,eAEfC,GAAMC,EAAAA,EAAAA,MAAND,EAIFE,GAAMC,EAAAA,EAAAA,UAuCZ,OAlCAC,EAAAA,EAAAA,YAAU,WAGN,IAAMC,EAAW,IAAIC,sBACjB,SAAAC,IAAaC,EAAAA,EAAAA,GAAAD,EAAA,GAAN,GAGOE,iBACNC,OAAOC,QAAQC,aAAa,KAAM,KAAM,YACxCb,EAAe,WAEvB,GAGA,CAAEc,UAAW,MAIXC,EAAaZ,EAAIa,QAQvB,OALID,GACAT,EAASW,QAAQF,GAId,WACCA,GACAT,EAASY,UAAUH,EAE3B,CACJ,GAAG,CAACf,KAIAmB,EAAAA,EAAAA,MAAA,WAASpB,UAAS,GAAAqB,OAAKrB,EAAS,8BAA8BI,IAAKA,EAAIkB,SAAA,EACnEC,EAAAA,EAAAA,KAAA,MAAIvB,UAAU,cAAasB,SACtBpB,EAAE,sBAEPqB,EAAAA,EAAAA,KAAA,MAAIvB,UAAU,iBAAgBsB,SACzBpB,EAAE,yBAEPqB,EAAAA,EAAAA,KAAA,KAAGvB,UAAU,kBAAiBsB,SACzBpB,EAAE,2BAInB,C","sources":["components/Hero/Hero.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nimport { useTranslation } from 'react-i18next';\n\n\nfunction Hero({ className, setActiveState }) {\n\n    const { t } = useTranslation();\n\n\n    // Ref for the DOM node of this component\n    const ref = useRef();\n\n    // this useEffect handles side effects post render\n    // sets up an intersection observer that listens for when the Hero section of the page enters the viewport\n    // url will update and as well as the active state of the application\n    useEffect(() => {\n\n        // Intersection Observer - detects when hero section enters viewport\n        const observer = new IntersectionObserver(\n            ([entry]) => {\n\n                // On intersection - update URL to \"#welcome\" and active state to 'welcome'\n                if (entry.isIntersecting) {\n                    window.history.replaceState(null, null, \"#welcome\");\n                    setActiveState(\"welcome\");\n                }\n            },\n\n            // Observer threshold set to 0.02, triggers callback when 2% of the element is visible\n            { threshold: 0.02 }\n        );\n\n        // Cleanup and store current ref\n        const currentRef = ref.current;\n\n        // If ref exists, observer starts observation\n        if (currentRef) {\n            observer.observe(currentRef);\n        }\n\n        // Cleanup function - Stop observer if ref exists\n        return () => {\n            if (currentRef) {\n                observer.unobserve(currentRef);\n            }\n        };\n    }, [setActiveState]);\n\n    // Renders Hero component \n    return (\n        <section className={`${className} hero-section bg-light p-3`} ref={ref}>\n            <h1 className='intro-title'>\n                {t('hero.introTitle')}\n            </h1>\n            <h2 className='intro-subtitle'>\n                {t('hero.introSubtitle')}\n            </h2>\n            <p className='intro-paragraph'>\n                {t('hero.introParagraph')}\n            </p>\n        </section>\n    )\n}\n\nexport default Hero;"],"names":["_ref","className","setActiveState","t","useTranslation","ref","useRef","useEffect","observer","IntersectionObserver","_ref2","_slicedToArray","isIntersecting","window","history","replaceState","threshold","currentRef","current","observe","unobserve","_jsxs","concat","children","_jsx"],"sourceRoot":""}